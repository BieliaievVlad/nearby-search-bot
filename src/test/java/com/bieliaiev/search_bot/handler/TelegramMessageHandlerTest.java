package com.bieliaiev.search_bot.handler;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Location;
import org.telegram.telegrambots.meta.api.objects.Message;

import com.bieliaiev.search_bot.dto.NearbySearchParams;
import com.bieliaiev.search_bot.dto.PlacesResponse.Result;
import com.bieliaiev.search_bot.service.SearchService;
import com.bieliaiev.search_bot.util.KeywordFormatter;
import com.bieliaiev.search_bot.util.UrlBuilder;

@ExtendWith(MockitoExtension.class)
class TelegramMessageHandlerTest {

	@Mock
	private KeywordFormatter keywordFormatter;
	
	@Mock
	private SearchService service;
	
    @Mock
    private UrlBuilder urlBuilder;

    @Mock
    private RestTemplate restTemplate;
	
	@InjectMocks
	private TelegramMessageHandler handler;
	
    @Test
    void handleTextMessage_KeywordIsBlank_ReturnsPromptMessage() {

        Message message = new Message();
        message.setText("    ");
        long chatId = 123L;

        when(keywordFormatter.prepareKeyword(anyString())).thenReturn(" ");

        SendMessage response = handler.handleTextMessage(message, chatId);

        assertEquals(String.valueOf(chatId), response.getChatId());
        assertEquals("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: —Å—É—à–∏ –∏–ª–∏ –∫–∞—Ñ–µ.", response.getText());
        assertNull(response.getReplyMarkup());
    }

    @Test
    void handleTextMessage_ValidKeyword_ReturnsLocationRequest() {

        Message message = new Message();
        message.setText("–°—É—à–∏");
        long chatId = 456L;

        when(keywordFormatter.prepareKeyword("—Å—É—à–∏")).thenReturn("—Å—É—à–∏");

        SendMessage response = handler.handleTextMessage(message, chatId);

        assertEquals(String.valueOf(chatId), response.getChatId());
        assertEquals("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", response.getText());
        assertNotNull(response.getReplyMarkup());
    }

    @Test
    void handleLocationMessage_LocationIsNull_ReturnsErrorMessage() {
        Message message = new Message();
        message.setLocation(null);
        long chatId = 1L;

        SendMessage response = handler.handleLocationMessage(message, chatId);

        assertEquals(String.valueOf(chatId), response.getChatId());
        assertEquals("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", response.getText());
    }

    @Test
    void handleLocationMessage_KeywordMissing_ReturnsPromptMessage() {
        Message message = new Message();
        Location location = new Location();
        message.setLocation(location);
        long chatId = 2L;

        SendMessage response = handler.handleLocationMessage(message, chatId);

        assertEquals(String.valueOf(chatId), response.getChatId());
        assertEquals("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: —Å—É—à–∏ –∏–ª–∏ –∫–∞—Ñ–µ.", response.getText());
    }

    @Test
    void handleLocationMessage_ValidKeywordAndLocation_ReturnsFormattedMessage() {
        long chatId = 3L;
        String keyword = "sushi";

        Location location = new Location();
        location.setLatitude(50.45);
        location.setLongitude(30.52);

        Message message = new Message();
        message.setLocation(location);

        ConcurrentHashMap<Long, String> cache = new ConcurrentHashMap<>();
        cache.put(chatId, keyword);
        ReflectionTestUtils.setField(handler, "keywordCache", cache);

        List<Result> mockResults = List.of(new Result());
        String formattedText = "<b>üç£ Sushi Place</b>";

        when(service.searchNearby(any(NearbySearchParams.class))).thenReturn(mockResults);
        when(service.formatResults(mockResults)).thenReturn(formattedText);

        SendMessage response = handler.handleLocationMessage(message, chatId);

        assertEquals(String.valueOf(chatId), response.getChatId());
        assertEquals(formattedText, response.getText());
        assertEquals("HTML", response.getParseMode());
        assertFalse(cache.containsKey(chatId));
    }
    
    @Test
    void handleStartCommand_ReturnsWelcomeMessage() {
        long chatId = 12345L;

        SendMessage response = handler.handleStartCommand(chatId);

        assertEquals(String.valueOf(chatId), response.getChatId());
        assertEquals("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: —Å—É—à–∏ –∏–ª–∏ –∫–∞—Ñ–µ.", response.getText());
        assertNull(response.getReplyMarkup());
    }
}
